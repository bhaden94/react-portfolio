{"version":3,"file":"static/js/93.e2ba2af8.chunk.js","mappings":"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","sources":["../node_modules/sanity/src/structure/panes/list/ListPaneContent.tsx","../node_modules/sanity/src/structure/panes/list/ListPaneHeader.tsx","../node_modules/sanity/src/structure/panes/list/ListPane.tsx"],"sourcesContent":["import {Box} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {\n  CommandList,\n  type CommandListItemContext,\n  type GeneralPreviewLayoutKey,\n  useGetI18nText,\n} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {PaneContent, PaneItem, usePaneLayout} from '../../components'\nimport {type PaneListItem, type PaneListItemDivider} from '../../types'\n\ninterface ListPaneContentProps {\n  childItemId?: string\n  isActive?: boolean\n  items: (PaneListItem<unknown> | PaneListItemDivider)[] | undefined\n  layout?: GeneralPreviewLayoutKey\n  showIcons: boolean\n  title: string\n}\n\nconst Divider = styled.hr`\n  background-color: var(--card-border-color);\n  height: 1px;\n  margin: 0;\n  border: none;\n`\n\n/**\n * @internal\n */\nexport function ListPaneContent(props: ListPaneContentProps) {\n  const {childItemId, items, isActive, layout, showIcons, title} = props\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n  const getI18nText = useGetI18nText(\n    items?.filter(\n      (item): item is Exclude<typeof item, {type: 'divider'}> => item.type !== 'divider',\n    ),\n  )\n\n  const getItemDisabled = useCallback(\n    (itemIndex: number) => {\n      return items?.find((_, i) => i === itemIndex)?.type === 'divider'\n    },\n    [items],\n  )\n\n  const shouldShowIconForItem = useCallback(\n    (item: PaneListItem): boolean => {\n      const itemShowIcon = item.displayOptions?.showIcon\n\n      // Specific true/false on item should have precedence over list setting\n      if (typeof itemShowIcon !== 'undefined') {\n        return itemShowIcon !== false // Boolean(item.icon)\n      }\n\n      // If no item setting is defined, defer to the pane settings\n      return showIcons !== false // Boolean(item.icon)\n    },\n    [showIcons],\n  )\n\n  const renderItem = useCallback(\n    (item: PaneListItem<unknown> | PaneListItemDivider, ctx: CommandListItemContext) => {\n      const {virtualIndex: itemIndex} = ctx\n\n      if (item.type === 'divider') {\n        return (\n          // eslint-disable-next-line react/no-array-index-key\n          <Box key={`divider-${itemIndex}`} marginBottom={1}>\n            <Divider />\n          </Box>\n        )\n      }\n\n      const pressed = !isActive && childItemId === item.id\n      const selected = isActive && childItemId === item.id\n      // If this is a document list item, pass on the ID and type,\n      // otherwise leave it undefined to use the passed title and gang\n      const value =\n        item._id && item.schemaType\n          ? {_id: item._id, _type: item.schemaType.name, title: item.title}\n          : undefined\n\n      return (\n        <PaneItem\n          icon={shouldShowIconForItem(item) ? item.icon : false}\n          id={item.id}\n          key={item.id}\n          layout={layout}\n          marginBottom={1}\n          pressed={pressed}\n          schemaType={item.schemaType}\n          selected={selected}\n          title={getI18nText(item).title}\n          value={value}\n        />\n      )\n    },\n    [childItemId, getI18nText, isActive, layout, shouldShowIconForItem],\n  )\n\n  return (\n    <PaneContent overflow={layoutCollapsed ? 'hidden' : 'auto'}>\n      {items && items.length > 0 && (\n        <CommandList\n          activeItemDataAttr=\"data-hovered\"\n          ariaLabel={title}\n          canReceiveFocus\n          getItemDisabled={getItemDisabled}\n          itemHeight={51}\n          items={items}\n          onlyShowSelectionWhenActive\n          paddingBottom={1}\n          paddingX={3}\n          renderItem={renderItem}\n          wrapAround={false}\n        />\n      )}\n    </PaneContent>\n  )\n}\n","import {ArrowLeftIcon} from '@sanity/icons'\n\nimport {Button} from '../../../ui-components'\nimport {BackLink, PaneHeader, PaneHeaderActions, usePane} from '../../components'\nimport {type PaneMenuItem, type PaneMenuItemGroup} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\n\ninterface ListPaneHeaderProps {\n  index: number\n  menuItems?: PaneMenuItem[]\n  menuItemGroups?: PaneMenuItemGroup[]\n  title: string\n}\n\nexport const ListPaneHeader = ({index, menuItems, menuItemGroups, title}: ListPaneHeaderProps) => {\n  const {features} = useStructureTool()\n  const {collapsed, isLast} = usePane()\n  // Prevent focus if this is the last (non-collapsed) pane.\n  const tabIndex = isLast && !collapsed ? -1 : 0\n\n  return (\n    <PaneHeader\n      actions={<PaneHeaderActions menuItems={menuItems} menuItemGroups={menuItemGroups} />}\n      backButton={\n        features.backButton &&\n        index > 0 && (\n          <Button\n            as={BackLink}\n            data-as=\"a\"\n            icon={ArrowLeftIcon}\n            mode=\"bleed\"\n            tooltipProps={{content: 'Back'}}\n          />\n        )\n      }\n      tabIndex={tabIndex}\n      title={title}\n    />\n  )\n}\n","import {Card, Code} from '@sanity/ui'\nimport {useI18nText} from 'sanity'\n\nimport {Pane} from '../../components'\nimport {_DEBUG} from '../../constants'\nimport {type BaseStructureToolPaneProps} from '../types'\nimport {ListPaneContent} from './ListPaneContent'\nimport {ListPaneHeader} from './ListPaneHeader'\n\ntype ListPaneProps = BaseStructureToolPaneProps<'list'>\n\n/**\n * @internal\n */\nexport function ListPane(props: ListPaneProps) {\n  const {childItemId, index, isActive, isSelected, pane, paneKey} = props\n\n  const {defaultLayout, displayOptions, items, menuItems, menuItemGroups} = pane\n  const showIcons = displayOptions?.showIcons !== false\n  const {title} = useI18nText(pane)\n\n  return (\n    <Pane\n      currentMaxWidth={350}\n      data-testid=\"structure-tool-list-pane\"\n      data-ui=\"ListPane\"\n      id={paneKey}\n      maxWidth={640}\n      minWidth={320}\n      selected={isSelected}\n    >\n      {_DEBUG && (\n        <Card padding={4} tone=\"transparent\">\n          <Code>{pane.source || '(none)'}</Code>\n        </Card>\n      )}\n\n      <ListPaneHeader\n        index={index}\n        menuItems={menuItems}\n        menuItemGroups={menuItemGroups}\n        title={title}\n      />\n\n      <ListPaneContent\n        childItemId={childItemId}\n        isActive={isActive}\n        items={items}\n        layout={defaultLayout}\n        key={paneKey}\n        showIcons={showIcons}\n        title={title}\n      />\n    </Pane>\n  )\n}\n"],"names":["Divider","styled","hr","_templateObject","_taggedTemplateLiteral","ListPaneContent","props","childItemId","items","isActive","layout","showIcons","title","collapsed","layoutCollapsed","usePaneLayout","getI18nText","useGetI18nText","filter","item","type","getItemDisabled","useCallback","itemIndex","_a","find","_","i","shouldShowIconForItem","itemShowIcon","displayOptions","showIcon","renderItem","ctx","virtualIndex","jsx","Box","marginBottom","children","concat","pressed","id","selected","value","_id","schemaType","_type","name","PaneItem","icon","PaneContent","overflow","length","CommandList","activeItemDataAttr","ariaLabel","canReceiveFocus","itemHeight","onlyShowSelectionWhenActive","paddingBottom","paddingX","wrapAround","ListPaneHeader","_ref","index","menuItems","menuItemGroups","features","useStructureTool","isLast","usePane","tabIndex","PaneHeader","actions","PaneHeaderActions","backButton","Button","as","BackLink","ArrowLeftIcon","mode","tooltipProps","content","ListPane","isSelected","pane","paneKey","defaultLayout","useI18nText","jsxs","Pane","currentMaxWidth","maxWidth","minWidth","_DEBUG"],"sourceRoot":""}