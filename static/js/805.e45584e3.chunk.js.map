{"version":3,"file":"static/js/805.e45584e3.chunk.js","mappings":"uPAUA,MAAMA,GAAOC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAUE,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,iCAIhB,SAASC,EAAyBC,GACvC,MAAM,SAACC,GAAYD,GACb,UAACE,IAAaC,EAAAA,EAAAA,WAGlB,OAAAC,EAAAA,EAAAA,KAACV,EAAA,CAAKW,OAAQH,EAAWI,OAAO,OAAOC,SAAS,OAC7CN,YAGP,CCJO,SAASO,EAAwBR,GAChC,qBAACS,EAAA,MAAgBC,EAAA,UAAOC,EAAA,eAAWC,EAAA,MAAgBC,GAASb,GAC5D,SAACc,IAAYC,EAAAA,EAAAA,oBAEnB,OAAK,MAAAJ,GAAAA,EAAWK,QAAWH,GAKzBT,EAAAA,EAAAA,KAACa,EAAAA,WAAA,CACCC,SACEd,EAAAA,EAAAA,KAACe,EAAAA,kBAAA,CACCR,YACAC,iBACAH,mBAGJW,WACEN,EAASM,YACTV,EAAQ,IACNN,EAAAA,EAAAA,KAACiB,EAAAA,GAAA,CACCC,GAAIC,EAAAA,SACJ,UAAQ,IACRC,KAAMC,EAAAA,IACNC,KAAK,QACLC,aAAc,CAACC,QAAS,UAI9Bf,UAxBK,IA2BX,CCpCO,SAASgB,EAAkB7B,GAChC,MAAM,MAACU,EAAA,KAAOoB,EAAA,QAAMC,KAAYC,GAAahC,GACvC,MACJiC,EAAA,UACAC,EAAA,UACAvB,EAAA,eACAC,EAEAuB,KAAMC,KACHC,GACDP,GACGQ,EAAKC,IAAUC,EAAAA,EAAAA,UAEZ,OACJ,MAAC3B,EAAQ,KAAM4B,EAAAA,EAAAA,KAAYX,GAG/B,OAAAY,EAAAA,EAAAA,MAACC,EAAAA,KAAA,CAAKC,GAAIb,EAASc,SAAU,IAAKC,SAAUd,EAAUe,WACpD9C,SAAA,EAAAG,EAAAA,EAAAA,KAACI,EAAA,CACCC,eAAqB,MAAL6B,OAAK,EAAAA,EAAA7B,eACrBC,QACAC,YACAC,iBACAC,WACF6B,EAAAA,EAAAA,MAEC3C,EACE,CAAAE,SAAA,EAAmB+C,EAAAA,EAAAA,oBAAAd,KAClBe,EAAAA,EAAAA,eAAcf,EAAW,IACpBF,KACAK,EAGEC,IAAKC,EACVN,QACAF,aAGHmB,EAAAA,EAAAA,gBAAehB,IAAcA,OAItC,C","sources":["../node_modules/sanity/src/structure/panes/userComponent/UserComponentPaneContent.tsx","../node_modules/sanity/src/structure/panes/userComponent/UserComponentPaneHeader.tsx","../node_modules/sanity/src/structure/panes/userComponent/UserComponentPane.tsx"],"sourcesContent":["import {Box} from '@sanity/ui'\nimport {type ReactNode} from 'react'\nimport {styled} from 'styled-components'\n\nimport {usePane} from '../../components'\n\ninterface UserComponentPaneContentProps {\n  children: ReactNode\n}\n\nconst Root = styled(Box)`\n  position: relative;\n`\n\nexport function UserComponentPaneContent(props: UserComponentPaneContentProps) {\n  const {children} = props\n  const {collapsed} = usePane()\n\n  return (\n    <Root hidden={collapsed} height=\"fill\" overflow=\"auto\">\n      {children}\n    </Root>\n  )\n}\n","import {ArrowLeftIcon} from '@sanity/icons'\n\nimport {Button} from '../../../ui-components'\nimport {BackLink, PaneHeader, PaneHeaderActions} from '../../components'\nimport {\n  type PaneMenuItem,\n  type PaneMenuItemGroup,\n  type StructureToolPaneActionHandler,\n} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\n\ninterface UserComponentPaneHeaderProps {\n  actionHandlers?: Record<string, StructureToolPaneActionHandler>\n  index: number\n  menuItems?: PaneMenuItem[]\n  menuItemGroups?: PaneMenuItemGroup[]\n  title: string\n}\n\nexport function UserComponentPaneHeader(props: UserComponentPaneHeaderProps) {\n  const {actionHandlers, index, menuItems, menuItemGroups, title} = props\n  const {features} = useStructureTool()\n\n  if (!menuItems?.length && !title) {\n    return null\n  }\n\n  return (\n    <PaneHeader\n      actions={\n        <PaneHeaderActions\n          menuItems={menuItems}\n          menuItemGroups={menuItemGroups}\n          actionHandlers={actionHandlers}\n        />\n      }\n      backButton={\n        features.backButton &&\n        index > 0 && (\n          <Button\n            as={BackLink}\n            data-as=\"a\"\n            icon={ArrowLeftIcon}\n            mode=\"bleed\"\n            tooltipProps={{content: 'Back'}}\n          />\n        )\n      }\n      title={title}\n    />\n  )\n}\n","import {createElement, isValidElement, useState} from 'react'\nimport {isValidElementType} from 'react-is'\nimport {useI18nText} from 'sanity'\n\nimport {Pane} from '../../components'\nimport {type StructureToolPaneActionHandler} from '../../types'\nimport {type BaseStructureToolPaneProps} from '../types'\nimport {UserComponentPaneContent} from './UserComponentPaneContent'\nimport {UserComponentPaneHeader} from './UserComponentPaneHeader'\n\ntype UserComponentPaneProps = BaseStructureToolPaneProps<'component'>\n\n/**\n * @internal\n */\nexport function UserComponentPane(props: UserComponentPaneProps) {\n  const {index, pane, paneKey, ...restProps} = props\n  const {\n    child,\n    component,\n    menuItems,\n    menuItemGroups,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    type: _unused,\n    ...restPane\n  } = pane\n  const [ref, setRef] = useState<{\n    actionHandlers?: Record<string, StructureToolPaneActionHandler>\n  } | null>(null)\n  const {title = ''} = useI18nText(pane)\n\n  return (\n    <Pane id={paneKey} minWidth={320} selected={restProps.isSelected}>\n      <UserComponentPaneHeader\n        actionHandlers={ref?.actionHandlers}\n        index={index}\n        menuItems={menuItems}\n        menuItemGroups={menuItemGroups}\n        title={title}\n      />\n\n      <UserComponentPaneContent>\n        {isValidElementType(component) &&\n          createElement(component, {\n            ...restProps,\n            ...restPane,\n            // NOTE: here we're utilizing the function form of refs so setting\n            // the ref causes a re-render for `UserComponentPaneHeader`\n            ...({ref: setRef} as any),\n            child: child as any, // @todo: Fix typings\n            paneKey,\n          })}\n\n        {isValidElement(component) && component}\n      </UserComponentPaneContent>\n    </Pane>\n  )\n}\n"],"names":["Root","styled","Box","_templateObject","_taggedTemplateLiteral","UserComponentPaneContent","props","children","collapsed","usePane","jsx","hidden","height","overflow","UserComponentPaneHeader","actionHandlers","index","menuItems","menuItemGroups","title","features","useStructureTool","length","PaneHeader","actions","PaneHeaderActions","backButton","Button","as","BackLink","icon","ArrowLeftIcon","mode","tooltipProps","content","UserComponentPane","pane","paneKey","restProps","child","component","type","_unused","restPane","ref","setRef","useState","useI18nText","jsxs","Pane","id","minWidth","selected","isSelected","isValidElementType","createElement","isValidElement"],"sourceRoot":""}